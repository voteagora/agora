diff --git a/node_modules/@typechain/ethers-v5/dist/codegen/events.js b/node_modules/@typechain/ethers-v5/dist/codegen/events.js
index ef89623..e30afef 100644
--- a/node_modules/@typechain/ethers-v5/dist/codegen/events.js
+++ b/node_modules/@typechain/ethers-v5/dist/codegen/events.js
@@ -44,12 +44,53 @@ function generateEventTypeExport(event, includeArgTypes) {
   `;
 }
 exports.generateEventTypeExport = generateEventTypeExport;
-function generateInterfaceEventDescription(event) {
-    return `'${generateEventSignature(event)}': EventFragment;`;
+function generateInterfaceEventDescription(event, _index, array = []) {
+    const signature = generateEventSignature(event);
+
+    return `'${signature}': EventFragment<EventMap['${signature}']>;`;
 }
 exports.generateInterfaceEventDescription = generateInterfaceEventDescription;
+
+function generateTypeEventDescription(event, _index, array = []) {
+  const identifier = generateEventIdentifier(event, { includeArgTypes: array.length !== 1 })
+  return `'${generateEventSignature(event)}': ${identifier}Object`
+}
+exports.generateTypeEventDescription = generateTypeEventDescription;
+
+function generateEventType(evmType) {
+    switch (evmType.type) {
+        case 'address':
+        case 'void':
+        case 'boolean':
+        case 'string':
+            return evmType.type;
+
+        case 'integer':
+            return `int${evmType.bits}`;
+
+        case 'uinteger':
+            return `uint${evmType.bits}`;
+
+        case 'dynamic-bytes':
+            return `bytes`;
+
+        case 'bytes':
+           return `bytes${evmType.size}`;
+
+        case 'array':
+            return `${generateEventType(evmType.itemType)}[]`;
+
+        case 'tuple':
+            return `(${evmType.components.map(it => generateEventType(it.type)).join(',')})`;
+
+        default:
+        case 'unknown':
+            throw new Error('unknown type');
+    }
+}
+
 function generateEventSignature(event) {
-    return `${event.name}(${event.inputs.map((input) => input.type.originalType).join(',')})`;
+    return `${event.name}(${event.inputs.map((input) => generateEventType(input.type)).join(",")})`;
 }
 exports.generateEventSignature = generateEventSignature;
 function generateEventInputs(eventArgs) {
@@ -68,7 +107,7 @@ function generateEventArgType(eventArg) {
 }
 exports.generateEventArgType = generateEventArgType;
 function generateGetEvent(event, useSignature) {
-    return `getEvent(nameOrSignatureOrTopic: '${useSignature ? generateEventSignature(event) : event.name}'): EventFragment;`;
+    return `getEvent(nameOrSignatureOrTopic: '${useSignature ? generateEventSignature(event) : event.name}'): EventFragment<EventMap['${generateEventSignature(event)}']>;`;
 }
 exports.generateGetEvent = generateGetEvent;
 function generateEventIdentifier(event, { includeArgTypes } = {}) {
diff --git a/node_modules/@typechain/ethers-v5/dist/codegen/index.js b/node_modules/@typechain/ethers-v5/dist/codegen/index.js
index 94e34bd..90be1bf 100644
--- a/node_modules/@typechain/ethers-v5/dist/codegen/index.js
+++ b/node_modules/@typechain/ethers-v5/dist/codegen/index.js
@@ -37,11 +37,21 @@ function codegenContractTypings(contract, codegenConfig) {
         .join('\n')}
     };
 
+    parseLog(log: { topics: Array<string>; data: string }): {
+      [K in keyof EventMap]: LogDescription<K, EventMap[K]>;
+    }[keyof EventMap];
+
     ${(0, lodash_1.values)(contract.events)
         .flatMap((v) => processDeclaration(v, alwaysGenerateOverloads, events_1.generateGetEvent))
         .join('\n')}
   }
 
+  type EventMap = {
+    ${(0, lodash_1.values)(contract.events)
+      .flatMap((v) => v.map(events_1.generateTypeEventDescription))
+      .join('\n')}
+  };
+
   ${(0, lodash_1.values)(contract.events).map(events_1.generateEventTypeExports).join('\n')}
 
   export interface ${contract.name} extends BaseContract {
@@ -104,7 +114,7 @@ function codegenContractTypings(contract, codegenConfig) {
             'Signer',
             'utils',
         ],
-        'type @ethersproject/abi': ['FunctionFragment', 'Result', 'EventFragment'],
+        'type @ethersproject/abi': ['FunctionFragment', 'Result', 'EventFragment', 'LogDescription'],
         'type @ethersproject/providers': ['Listener', 'Provider'],
     }, source) +
         '\n' +
